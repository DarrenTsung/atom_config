var _ = require('lodash');
var path_1 = require('path');
var glob = require('glob');
var primaryFilesToSearch = ['global.json', '*.sln', '*.csx'];
var secondaryFilesToSearch = ['project.json', '*.csproj', '*.cs'];
function findProject(location, logger) {
    location = _.trimRight(location, path_1.sep);
    var locations = location.split(path_1.sep);
    var mappedLocations = locations.map(function (loc, index) {
        return _.take(locations, index + 1).join(path_1.sep);
    });
    mappedLocations.reverse();
    var primaryResult = searchForFolder(mappedLocations, primaryFilesToSearch, logger);
    if (primaryResult) {
        return primaryResult;
    }
    var secondaryResult = searchForFolder(mappedLocations, secondaryFilesToSearch, logger);
    if (secondaryResult) {
        return secondaryResult;
    }
    return null;
}
exports.findProject = findProject;
function searchForFolder(locations, filesToSearch, logger) {
    var foundFiles;
    var foundFiles = _(locations)
        .map(function (location) { return ({
        location: location,
        files: filesToSearch.map(function (fileName) { return path_1.join(location, fileName); })
    }); })
        .map(function (_a) {
        var location = _a.location, files = _a.files;
        logger.log("Omnisharp Project Finder: Searching " + location + " for " + filesToSearch);
        return _(files).map(function (file) {
            var g = glob.sync(file);
            if (g && g.length) {
                return g;
            }
            return [];
        })
            .filter(function (x) { return x && x.length; })
            .first();
    })
        .filter(function (x) { return x && x.length; })
        .tap(function (x) { return logger.log("Omnisharp Project Finder: Found " + x); })
        .first();
    if (foundFiles) {
        if (_.any(foundFiles, function (x) { return _.endsWith(x, '.sln'); }))
            return path_1.normalize(foundFiles[0]);
        if (foundFiles.length === 1)
            return path_1.normalize(path_1.dirname(foundFiles[0]));
    }
}
