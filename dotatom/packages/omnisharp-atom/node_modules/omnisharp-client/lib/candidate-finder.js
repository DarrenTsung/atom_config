var _ = require('lodash');
var path_1 = require('path');
var rx_1 = require("rx");
var sepRegex = /[\\|\/]/g;
var glob = rx_1.Observable.fromNodeCallback(require('globby'));
var solutionFilesToSearch = ['global.json', '*.sln'];
var projectFilesToSearch = ['project.json', '*.csproj'];
var scriptCsFilesToSearch = ['*.csx'];
var csharpFilesToSearch = ['*.cs'];
function findCandidates(location, logger) {
    location = _.trimRight(location, path_1.sep);
    var projects = searchForCandidates(location, solutionFilesToSearch, logger)
        .toArray()
        .flatMap(function (result) { return result.length ? rx_1.Observable.from(result) : searchForCandidates(location, projectFilesToSearch, logger); })
        .map(function (z) { return z.split(sepRegex).join(path_1.sep); })
        .toArray()
        .map(squashCandidates);
    var scriptCs = searchForCandidates(location, scriptCsFilesToSearch, logger)
        .map(function (z) { return z.split(sepRegex).join(path_1.sep); })
        .toArray();
    var baseFiles = rx_1.Observable.concat(projects, scriptCs)
        .flatMap(function (x) { return rx_1.Observable.from(x); })
        .shareReplay();
    return baseFiles.isEmpty()
        .flatMap(function (isEmpty) {
        if (isEmpty) {
            return searchForCandidates(location, csharpFilesToSearch, logger)
                .map(function (z) { return z.split(sepRegex).join(path_1.sep); });
        }
        else {
            return baseFiles;
        }
    })
        .distinct()
        .toArray()
        .tapOnNext(function (candidates) { return logger.log("Omni Project Candidates: Found " + candidates); });
}
exports.findCandidates = findCandidates;
function squashCandidates(candidates) {
    var rootCandidateCount = getMinCandidate(candidates);
    var r = _.unique(candidates.filter(function (z) { return z.split(sepRegex).length === rootCandidateCount; }));
    return r;
}
function getMinCandidate(candidates) {
    if (!candidates.length)
        return -1;
    return _.min(candidates, function (z) {
        return z.split(sepRegex).length;
    }).split(sepRegex).length;
}
function searchForCandidates(location, filesToSearch, logger) {
    var locations = location.split(path_1.sep);
    locations = locations.map(function (loc, index) {
        return _.take(locations, locations.length - index).join(path_1.sep);
    });
    locations = locations.slice(0, Math.min(5, locations.length));
    var rootObservable = rx_1.Observable.from(locations)
        .subscribeOn(rx_1.Scheduler.timeout)
        .map(function (loc) { return ({
        loc: loc,
        files: filesToSearch.map(function (fileName) { return path_1.join(loc, fileName); })
    }); })
        .flatMap(function (_a) {
        var loc = _a.loc, files = _a.files;
        logger.log("Omni Project Candidates: Searching " + loc + " for " + filesToSearch);
        return rx_1.Observable.from(files)
            .flatMap(function (file) { return glob([file]); })
            .map(function (x) {
            if (x.length > 1) {
                var unitySolutionIndex = _.findIndex(x, function (z) { return _.endsWith(z, '-csharp.sln'); });
                if (unitySolutionIndex > -1) {
                    var unitySolution = x[unitySolutionIndex];
                    var baseSolution = unitySolution.substr(0, unitySolution.indexOf('-csharp.sln')) + '.sln';
                    var baseSolutionIndex = _.findIndex(x, function (x) { return x.toLowerCase() === baseSolution.toLowerCase(); });
                    if (baseSolutionIndex > -1) {
                        x.splice(baseSolutionIndex, 1);
                    }
                }
            }
            return x;
        });
    })
        .filter(function (z) { return z.length > 0; })
        .defaultIfEmpty([])
        .first()
        .flatMap(function (z) { return rx_1.Observable.from(z); })
        .map(function (file) { return _.endsWith(file, ".sln") ? file : path_1.dirname(file); })
        .tapOnNext(function (x) { return console.log('hell!!!!', x); });
    return rootObservable;
}
