import { IDriver, IDriverOptions } from "../interfaces";
import { DriverState } from "../enums";
declare class StdioDriver implements IDriver {
    private _seq;
    private _process;
    private _outstandingRequests;
    private _projectPath;
    private _serverPath;
    private _additionalArguments;
    private _currentState;
    private _disposable;
    currentState: DriverState;
    private _findProject;
    private _logger;
    private _timeout;
    id: string;
    constructor({projectPath, debug, serverPath, findProject, logger, timeout, additionalArguments}: IDriverOptions);
    dispose(): void;
    serverPath: string;
    projectPath: string;
    private _commandStream;
    commands: Rx.Observable<OmniSharp.Stdio.Protocol.ResponsePacket>;
    private _eventStream;
    events: Rx.Observable<OmniSharp.Stdio.Protocol.EventPacket>;
    private _connectionStream;
    state: Rx.Observable<DriverState>;
    outstandingRequests: number;
    connect({projectPath, findProject, additionalArguments}: IDriverOptions): void;
    private serverErr(data);
    private parseError(data);
    disconnect(): void;
    request<TRequest, TResponse>(command: string, request?: TRequest): Rx.Observable<TResponse>;
    private handleData(data);
    private handlePacket(packet);
    private handlePacketResponse(response);
    private handlePacketEvent(event);
    private handleNonPacket(data);
}
export = StdioDriver;
