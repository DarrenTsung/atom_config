var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var client_base_1 = require("./client-base");
function isNotNull(value, errorText) {
    if (value === null || value === undefined) {
        throw new Error(errorText);
    }
}
function isAbove(value, minValue, errorText) {
    if (value === null || value === undefined) {
        return;
    }
    if (value <= minValue) {
        throw new Error(errorText);
    }
}
var ClientV1 = (function (_super) {
    __extends(ClientV1, _super);
    function ClientV1(_options) {
        if (_options === void 0) { _options = {}; }
        _super.call(this, _options);
    }
    ClientV1.prototype.setupObservers = function () {
        client_base_1.ClientBase.prototype.setupObservers.call(this);
        this.observeUpdatebuffer = this.watchCommand("updatebuffer");
        this.observeChangebuffer = this.watchCommand("changebuffer");
        this.observeCodecheck = this.watchCommand("codecheck");
        this.observeFormatAfterKeystroke = this.watchCommand("formatafterkeystroke");
        this.observeFormatRange = this.watchCommand("formatrange");
        this.observeCodeformat = this.watchCommand("codeformat");
        this.observeAutocomplete = this.watchCommand("autocomplete");
        this.observeFindimplementations = this.watchCommand("findimplementations");
        this.observeFindsymbols = this.watchCommand("findsymbols");
        this.observeFindusages = this.watchCommand("findusages");
        this.observeGotodefinition = this.watchCommand("gotodefinition");
        this.observeGotofile = this.watchCommand("gotofile");
        this.observeGotoregion = this.watchCommand("gotoregion");
        this.observeHighlight = this.watchCommand("highlight");
        this.observeMetadata = this.watchCommand("metadata");
        this.observeNavigateup = this.watchCommand("navigateup");
        this.observeNavigatedown = this.watchCommand("navigatedown");
        this.observePackagesearch = this.watchCommand("packagesearch");
        this.observePackagesource = this.watchCommand("packagesource");
        this.observePackageversion = this.watchCommand("packageversion");
        this.observeRename = this.watchCommand("rename");
        this.observeSignatureHelp = this.watchCommand("signaturehelp");
        this.observeCheckalivestatus = this.watchCommand("checkalivestatus");
        this.observeCheckreadystatus = this.watchCommand("checkreadystatus");
        this.observeCurrentfilemembersastree = this.watchCommand("currentfilemembersastree");
        this.observeCurrentfilemembersasflat = this.watchCommand("currentfilemembersasflat");
        this.observeTypelookup = this.watchCommand("typelookup");
        this.observeFilesChanged = this.watchCommand("fileschanged");
        this.observeProjects = this.watchCommand("projects");
        this.observeProject = this.watchCommand("project");
        this.observeGetcodeactions = this.watchCommand("getcodeactions");
        this.observeRuncodeaction = this.watchCommand("runcodeaction");
        this.observeGettestcontext = this.watchCommand("gettestcontext");
    };
    ClientV1.prototype.updatebuffer = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Buffer, 'request.Buffer must not be null');
        return this.request("updatebuffer", request, options);
    };
    ClientV1.prototype.updatebufferPromise = function (request, options) {
        return this.updatebuffer(request, options).toPromise();
    };
    ClientV1.prototype.changebuffer = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.NewText, 'request.NewText must not be null');
        isNotNull(request.StartLine, 'request.StartLine must not be null');
        isAbove(request.StartLine, this._lowestIndexValue - 1, "request.StartLine must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.StartColumn, 'request.StartColumn must not be null');
        isAbove(request.StartColumn, this._lowestIndexValue - 1, "request.StartColumn must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.EndLine, 'request.EndLine must not be null');
        isAbove(request.EndLine, this._lowestIndexValue - 1, "request.EndLine must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.EndColumn, 'request.EndColumn must not be null');
        isAbove(request.EndColumn, this._lowestIndexValue - 1, "request.EndColumn must be greater than or equal to " + this._lowestIndexValue);
        return this.request("changebuffer", request, options);
    };
    ClientV1.prototype.changebufferPromise = function (request, options) {
        return this.changebuffer(request, options).toPromise();
    };
    ClientV1.prototype.codecheck = function (request, options) {
        return this.request("codecheck", request, options);
    };
    ClientV1.prototype.codecheckPromise = function (request, options) {
        return this.codecheck(request, options).toPromise();
    };
    ClientV1.prototype.formatAfterKeystroke = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Character || request.Char, 'request.Character || request.Char must not be null');
        return this.request("formatAfterKeystroke", request, options);
    };
    ClientV1.prototype.formatAfterKeystrokePromise = function (request, options) {
        return this.formatAfterKeystroke(request, options).toPromise();
    };
    ClientV1.prototype.formatRange = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.EndLine, 'request.EndLine must not be null');
        isAbove(request.EndLine, this._lowestIndexValue - 1, "request.EndLine must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.EndColumn, 'request.EndColumn must not be null');
        isAbove(request.EndColumn, this._lowestIndexValue - 1, "request.EndColumn must be greater than or equal to " + this._lowestIndexValue);
        return this.request("formatRange", request, options);
    };
    ClientV1.prototype.formatRangePromise = function (request, options) {
        return this.formatRange(request, options).toPromise();
    };
    ClientV1.prototype.codeformat = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        return this.request("codeformat", request, options);
    };
    ClientV1.prototype.codeformatPromise = function (request, options) {
        return this.codeformat(request, options).toPromise();
    };
    ClientV1.prototype.autocomplete = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.WordToComplete, 'request.WordToComplete must not be null');
        return this.request("autocomplete", request, options);
    };
    ClientV1.prototype.autocompletePromise = function (request, options) {
        return this.autocomplete(request, options).toPromise();
    };
    ClientV1.prototype.findimplementations = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        return this.request("findimplementations", request, options);
    };
    ClientV1.prototype.findimplementationsPromise = function (request, options) {
        return this.findimplementations(request, options).toPromise();
    };
    ClientV1.prototype.findsymbols = function (request, options) {
        isNotNull(request.Filter, 'request.Filter must not be null');
        return this.request("findsymbols", request, options);
    };
    ClientV1.prototype.findsymbolsPromise = function (request, options) {
        return this.findsymbols(request, options).toPromise();
    };
    ClientV1.prototype.findusages = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        return this.request("findusages", request, options);
    };
    ClientV1.prototype.findusagesPromise = function (request, options) {
        return this.findusages(request, options).toPromise();
    };
    ClientV1.prototype.gotodefinition = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        return this.request("gotodefinition", request, options);
    };
    ClientV1.prototype.gotodefinitionPromise = function (request, options) {
        return this.gotodefinition(request, options).toPromise();
    };
    ClientV1.prototype.navigateup = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        return this.request("navigateup", request, options);
    };
    ClientV1.prototype.navigateupPromise = function (request, options) {
        return this.navigateup(request, options).toPromise();
    };
    ClientV1.prototype.gotofile = function (request, options) {
        return this.request("gotofile", request, options);
    };
    ClientV1.prototype.gotofilePromise = function (request, options) {
        return this.gotofile(request, options).toPromise();
    };
    ClientV1.prototype.gotoregion = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        return this.request("gotoregion", request, options);
    };
    ClientV1.prototype.gotoregionPromise = function (request, options) {
        return this.gotofile(request, options).toPromise();
    };
    ClientV1.prototype.highlight = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        return this.request("highlight", request, options);
    };
    ClientV1.prototype.highlightPromise = function (request, options) {
        return this.highlight(request, options).toPromise();
    };
    ClientV1.prototype.metadata = function (request, options) {
        isNotNull(request.AssemblyName, 'request.AssemblyName must not be null');
        isNotNull(request.TypeName, 'request.TypeName must not be null');
        return this.request("metadata", request, options);
    };
    ClientV1.prototype.metadataPromise = function (request, options) {
        return this.metadata(request, options).toPromise();
    };
    ClientV1.prototype.navigatedown = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        return this.request("navigatedown", request, options);
    };
    ClientV1.prototype.navigatedownPromise = function (request, options) {
        return this.navigatedown(request, options).toPromise();
    };
    ClientV1.prototype.packagesearch = function (request, options) {
        isNotNull(request.ProjectPath, 'request.ProjectPath must not be null');
        isNotNull(request.Search, 'request.Search must not be null');
        return this.request("packagesearch", request, options);
    };
    ClientV1.prototype.packagesearchPromise = function (request, options) {
        return this.packagesearch(request, options).toPromise();
    };
    ClientV1.prototype.packagesource = function (request, options) {
        isNotNull(request.ProjectPath, 'request.ProjectPath must not be null');
        return this.request("packagesource", request, options);
    };
    ClientV1.prototype.packagesourcePromise = function (request, options) {
        return this.packagesource(request, options).toPromise();
    };
    ClientV1.prototype.packageversion = function (request, options) {
        isNotNull(request.ProjectPath, 'request.ProjectPath must not be null');
        isNotNull(request.Id, 'request.Id must not be null');
        return this.request("packageversion", request, options);
    };
    ClientV1.prototype.packageversionPromise = function (request, options) {
        return this.packageversion(request, options).toPromise();
    };
    ClientV1.prototype.rename = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.RenameTo, 'request.RenameTo must not be null');
        return this.request("rename", request, options);
    };
    ClientV1.prototype.renamePromise = function (request, options) {
        return this.rename(request, options).toPromise();
    };
    ClientV1.prototype.signatureHelp = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        return this.request("signatureHelp", request, options);
    };
    ClientV1.prototype.signatureHelpPromise = function (request, options) {
        return this.signatureHelp(request, options).toPromise();
    };
    ClientV1.prototype.checkalivestatus = function (options) {
        return this.request("checkalivestatus", {}, options);
    };
    ClientV1.prototype.checkalivestatusPromise = function (options) {
        return this.checkalivestatus(options).toPromise();
    };
    ClientV1.prototype.checkreadystatus = function (options) {
        return this.request("checkreadystatus", {}, options);
    };
    ClientV1.prototype.checkreadystatusPromise = function (options) {
        return this.checkreadystatus(options).toPromise();
    };
    ClientV1.prototype.currentfilemembersastree = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        return this.request("currentfilemembersastree", request, options);
    };
    ClientV1.prototype.currentfilemembersastreePromise = function (request, options) {
        return this.currentfilemembersastree(request, options).toPromise();
    };
    ClientV1.prototype.currentfilemembersasflat = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        return this.request("currentfilemembersasflat", request, options);
    };
    ClientV1.prototype.currentfilemembersasflatPromise = function (request, options) {
        return this.currentfilemembersasflat(request, options).toPromise();
    };
    ClientV1.prototype.typelookup = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        return this.request("typelookup", request, options);
    };
    ClientV1.prototype.typelookupPromise = function (request, options) {
        return this.typelookup(request, options).toPromise();
    };
    ClientV1.prototype.filesChanged = function (request, options) {
        isNotNull(request, 'request must not be null');
        return this.request("filesChanged", request, options);
    };
    ClientV1.prototype.filesChangedPromise = function (request, options) {
        return this.filesChanged(request, options).toPromise();
    };
    ClientV1.prototype.projects = function (request, options) {
        return this.request("projects", request, options);
    };
    ClientV1.prototype.projectsPromise = function (request, options) {
        return this.projects(options).toPromise();
    };
    ClientV1.prototype.project = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        return this.request("project", request, options);
    };
    ClientV1.prototype.projectPromise = function (request, options) {
        return this.project(request, options).toPromise();
    };
    ClientV1.prototype.getcodeactions = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        return this.request("getcodeactions", request, options);
    };
    ClientV1.prototype.getcodeactionsPromise = function (request, options) {
        return this.getcodeactions(request, options).toPromise();
    };
    ClientV1.prototype.runcodeaction = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.CodeAction, 'request.CodeAction must not be null');
        isAbove(request.CodeAction, this._lowestIndexValue - 1, "request.CodeAction must be greater than or equal to " + this._lowestIndexValue);
        return this.request("runcodeaction", request, options);
    };
    ClientV1.prototype.runcodeactionPromise = function (request, options) {
        return this.runcodeaction(request, options).toPromise();
    };
    ClientV1.prototype.gettestcontext = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Line, 'request.Line must not be null');
        isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Column, 'request.Column must not be null');
        isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        isNotNull(request.Type, 'request.Type must not be null');
        isAbove(request.Type, this._lowestIndexValue - 1, "request.Type must be greater than or equal to " + this._lowestIndexValue);
        return this.request("gettestcontext", request, options);
    };
    ClientV1.prototype.gettestcontextPromise = function (request, options) {
        return this.gettestcontext(request, options).toPromise();
    };
    return ClientV1;
})(client_base_1.ClientBase);
exports.ClientV1 = ClientV1;
(function (Client) {
    Client.setupObservers = Client.prototype.setupObservers;
})(ClientV1);
