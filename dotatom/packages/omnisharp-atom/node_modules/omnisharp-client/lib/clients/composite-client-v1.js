var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var composite_client_base_1 = require("./composite-client-base");
var ObservationClientV1 = (function (_super) {
    __extends(ObservationClientV1, _super);
    function ObservationClientV1(clients) {
        if (clients === void 0) { clients = []; }
        _super.call(this, clients);
        this.observeUpdatebuffer = this.makeMergeObserable(function (client) { return client.observeUpdatebuffer; });
        this.observeChangebuffer = this.makeMergeObserable(function (client) { return client.observeChangebuffer; });
        this.observeCodecheck = this.makeMergeObserable(function (client) { return client.observeCodecheck; });
        this.observeFormatAfterKeystroke = this.makeMergeObserable(function (client) { return client.observeFormatAfterKeystroke; });
        this.observeFormatRange = this.makeMergeObserable(function (client) { return client.observeFormatRange; });
        this.observeCodeformat = this.makeMergeObserable(function (client) { return client.observeCodeformat; });
        this.observeAutocomplete = this.makeMergeObserable(function (client) { return client.observeAutocomplete; });
        this.observeFindimplementations = this.makeMergeObserable(function (client) { return client.observeFindimplementations; });
        this.observeFindsymbols = this.makeMergeObserable(function (client) { return client.observeFindsymbols; });
        this.observeFindusages = this.makeMergeObserable(function (client) { return client.observeFindusages; });
        this.observeGotodefinition = this.makeMergeObserable(function (client) { return client.observeGotodefinition; });
        this.observeGotofile = this.makeMergeObserable(function (client) { return client.observeGotofile; });
        this.observeGotoregion = this.makeMergeObserable(function (client) { return client.observeGotoregion; });
        this.observeHighlight = this.makeMergeObserable(function (client) { return client.observeHighlight; });
        this.observeMetadata = this.makeMergeObserable(function (client) { return client.observeMetadata; });
        this.observeNavigateup = this.makeMergeObserable(function (client) { return client.observeNavigateup; });
        this.observeNavigatedown = this.makeMergeObserable(function (client) { return client.observeNavigatedown; });
        this.observePackagesearch = this.makeMergeObserable(function (client) { return client.observePackagesearch; });
        this.observePackagesource = this.makeMergeObserable(function (client) { return client.observePackagesource; });
        this.observePackageversion = this.makeMergeObserable(function (client) { return client.observePackageversion; });
        this.observeRename = this.makeMergeObserable(function (client) { return client.observeRename; });
        this.observeSignatureHelp = this.makeMergeObserable(function (client) { return client.observeSignatureHelp; });
        this.observeCheckalivestatus = this.makeMergeObserable(function (client) { return client.observeCheckalivestatus; });
        this.observeCheckreadystatus = this.makeMergeObserable(function (client) { return client.observeCheckreadystatus; });
        this.observeCurrentfilemembersastree = this.makeMergeObserable(function (client) { return client.observeCurrentfilemembersastree; });
        this.observeCurrentfilemembersasflat = this.makeMergeObserable(function (client) { return client.observeCurrentfilemembersasflat; });
        this.observeTypelookup = this.makeMergeObserable(function (client) { return client.observeTypelookup; });
        this.observeFilesChanged = this.makeMergeObserable(function (client) { return client.observeFilesChanged; });
        this.observeProjects = this.makeMergeObserable(function (client) { return client.observeProjects; });
        this.observeProject = this.makeMergeObserable(function (client) { return client.observeProject; });
        this.observeGetcodeactions = this.makeMergeObserable(function (client) { return client.observeGetcodeactions; });
        this.observeRuncodeaction = this.makeMergeObserable(function (client) { return client.observeRuncodeaction; });
        this.observeGettestcontext = this.makeMergeObserable(function (client) { return client.observeGettestcontext; });
    }
    return ObservationClientV1;
})(composite_client_base_1.ObservationClientBase);
exports.ObservationClientV1 = ObservationClientV1;
var CombinationClientV1 = (function (_super) {
    __extends(CombinationClientV1, _super);
    function CombinationClientV1(clients) {
        if (clients === void 0) { clients = []; }
        _super.call(this, clients);
        this.observeUpdatebuffer = this.makeCombineObserable(function (client) { return client.observeUpdatebuffer; });
        this.observeChangebuffer = this.makeCombineObserable(function (client) { return client.observeChangebuffer; });
        this.observeCodecheck = this.makeCombineObserable(function (client) { return client.observeCodecheck; });
        this.observeFormatAfterKeystroke = this.makeCombineObserable(function (client) { return client.observeFormatAfterKeystroke; });
        this.observeFormatRange = this.makeCombineObserable(function (client) { return client.observeFormatRange; });
        this.observeCodeformat = this.makeCombineObserable(function (client) { return client.observeCodeformat; });
        this.observeAutocomplete = this.makeCombineObserable(function (client) { return client.observeAutocomplete; });
        this.observeFindimplementations = this.makeCombineObserable(function (client) { return client.observeFindimplementations; });
        this.observeFindsymbols = this.makeCombineObserable(function (client) { return client.observeFindsymbols; });
        this.observeFindusages = this.makeCombineObserable(function (client) { return client.observeFindusages; });
        this.observeGotodefinition = this.makeCombineObserable(function (client) { return client.observeGotodefinition; });
        this.observeGotofile = this.makeCombineObserable(function (client) { return client.observeGotofile; });
        this.observeGotoregion = this.makeCombineObserable(function (client) { return client.observeGotoregion; });
        this.observeHighlight = this.makeCombineObserable(function (client) { return client.observeHighlight; });
        this.observeMetadata = this.makeCombineObserable(function (client) { return client.observeMetadata; });
        this.observeNavigateup = this.makeCombineObserable(function (client) { return client.observeNavigateup; });
        this.observeNavigatedown = this.makeCombineObserable(function (client) { return client.observeNavigatedown; });
        this.observePackagesearch = this.makeCombineObserable(function (client) { return client.observePackagesearch; });
        this.observePackagesource = this.makeCombineObserable(function (client) { return client.observePackagesource; });
        this.observePackageversion = this.makeCombineObserable(function (client) { return client.observePackageversion; });
        this.observeRename = this.makeCombineObserable(function (client) { return client.observeRename; });
        this.observeSignatureHelp = this.makeCombineObserable(function (client) { return client.observeSignatureHelp; });
        this.observeCheckalivestatus = this.makeCombineObserable(function (client) { return client.observeCheckalivestatus; });
        this.observeCheckreadystatus = this.makeCombineObserable(function (client) { return client.observeCheckreadystatus; });
        this.observeCurrentfilemembersastree = this.makeCombineObserable(function (client) { return client.observeCurrentfilemembersastree; });
        this.observeCurrentfilemembersasflat = this.makeCombineObserable(function (client) { return client.observeCurrentfilemembersasflat; });
        this.observeTypelookup = this.makeCombineObserable(function (client) { return client.observeTypelookup; });
        this.observeFilesChanged = this.makeCombineObserable(function (client) { return client.observeFilesChanged; });
        this.observeProjects = this.makeCombineObserable(function (client) { return client.observeProjects; });
        this.observeProject = this.makeCombineObserable(function (client) { return client.observeProject; });
        this.observeGetcodeactions = this.makeCombineObserable(function (client) { return client.observeGetcodeactions; });
        this.observeRuncodeaction = this.makeCombineObserable(function (client) { return client.observeRuncodeaction; });
        this.observeGettestcontext = this.makeCombineObserable(function (client) { return client.observeGettestcontext; });
    }
    return CombinationClientV1;
})(composite_client_base_1.CombinationClientBase);
exports.CombinationClientV1 = CombinationClientV1;
