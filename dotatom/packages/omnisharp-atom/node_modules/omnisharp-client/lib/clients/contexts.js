var lodash_1 = require("lodash");
var response_handling_1 = require("./response-handling");
var stripBom = require('strip-bom');
var CommandContext = (function () {
    function CommandContext(command, value) {
        this.command = command;
        this.value = value;
    }
    return CommandContext;
})();
exports.CommandContext = CommandContext;
var RequestContext = (function () {
    function RequestContext(clientId, command, request, _a, sequence) {
        var silent = _a.silent, oneBasedIndices = _a.oneBasedIndices;
        if (sequence === void 0) { sequence = lodash_1.uniqueId("__request"); }
        this.clientId = clientId;
        if (command)
            this.command = command.toLowerCase();
        if (lodash_1.isObject(request)) {
            if (request['Buffer']) {
                request['Buffer'] = stripBom(request['Buffer']);
            }
            var obj = lodash_1.cloneDeep(request);
            if (!oneBasedIndices) {
                obj = response_handling_1.requestMutator(obj);
            }
            this.request = Object.freeze(obj);
        }
        else {
            this.request = request;
        }
        this.silent = !!silent;
        this.sequence = sequence;
        this.time = new Date();
        Object.freeze(this);
    }
    RequestContext.prototype.isCommand = function (command) {
        if (command && this.command) {
            return command.toLowerCase() === this.command;
        }
        return null;
    };
    RequestContext.prototype.getResponse = function (stream) {
        var _this = this;
        return stream.first(function (res) { return res.sequence === _this.sequence; }).map(function (z) { return z.response; });
    };
    return RequestContext;
})();
exports.RequestContext = RequestContext;
var ResponseContext = (function () {
    function ResponseContext(_a, response) {
        var clientId = _a.clientId, request = _a.request, command = _a.command, sequence = _a.sequence, time = _a.time, silent = _a.silent, oneBasedIndices = _a.oneBasedIndices;
        if (command)
            this.command = command.toLowerCase();
        if (lodash_1.isObject(response)) {
            if (!oneBasedIndices) {
                response = response_handling_1.responseMutator(response);
            }
            this.response = Object.freeze(response);
        }
        else {
            this.response = response;
        }
        this.clientId = clientId;
        this.request = request;
        this.command = command;
        this.sequence = sequence;
        this.time = new Date();
        this.silent = !!silent;
        this.responseTime = this.time.getTime() - time.getTime();
        Object.freeze(this);
    }
    ResponseContext.prototype.isCommand = function (command) {
        if (command && this.command) {
            return command.toLowerCase() === this.command;
        }
        return null;
    };
    return ResponseContext;
})();
exports.ResponseContext = ResponseContext;
