var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var client_base_1 = require("./client-base");
var client_v1_1 = require("./client-v1");
var lodash_1 = require("lodash");
function isNotNull(value, errorText) {
    if (value === null || value === undefined) {
        throw new Error(errorText);
    }
}
function isAbove(value, minValue, errorText) {
    if (value === null || value === undefined) {
        return;
    }
    if (value <= minValue) {
        throw new Error(errorText);
    }
}
var ClientV2 = (function (_super) {
    __extends(ClientV2, _super);
    function ClientV2(_options) {
        if (_options === void 0) { _options = {}; }
        _super.call(this, _options);
        this.v1 = client_base_1.ClientBase.fromClient(client_v1_1.ClientV1, this);
    }
    ClientV2.prototype.setupObservers = function () {
        client_base_1.ClientBase.prototype.setupObservers.call(this);
        this.observeUpdatebuffer = this.watchCommand("updatebuffer");
        this.observeChangebuffer = this.watchCommand("changebuffer");
        this.observeCodecheck = this.watchCommand("codecheck");
        this.observeFormatAfterKeystroke = this.watchCommand("formatafterkeystroke");
        this.observeFormatRange = this.watchCommand("formatrange");
        this.observeCodeformat = this.watchCommand("codeformat");
        this.observeAutocomplete = this.watchCommand("autocomplete");
        this.observeFindimplementations = this.watchCommand("findimplementations");
        this.observeFindsymbols = this.watchCommand("findsymbols");
        this.observeFindusages = this.watchCommand("findusages");
        this.observeGotodefinition = this.watchCommand("gotodefinition");
        this.observeGotofile = this.watchCommand("gotofile");
        this.observeGotoregion = this.watchCommand("gotoregion");
        this.observeHighlight = this.watchCommand("highlight");
        this.observeMetadata = this.watchCommand("metadata");
        this.observeNavigateup = this.watchCommand("navigateup");
        this.observeNavigatedown = this.watchCommand("navigatedown");
        this.observePackagesearch = this.watchCommand("packagesearch");
        this.observePackagesource = this.watchCommand("packagesource");
        this.observePackageversion = this.watchCommand("packageversion");
        this.observeRename = this.watchCommand("rename");
        this.observeSignatureHelp = this.watchCommand("signaturehelp");
        this.observeCheckalivestatus = this.watchCommand("checkalivestatus");
        this.observeCheckreadystatus = this.watchCommand("checkreadystatus");
        this.observeCurrentfilemembersastree = this.watchCommand("currentfilemembersastree");
        this.observeCurrentfilemembersasflat = this.watchCommand("currentfilemembersasflat");
        this.observeTypelookup = this.watchCommand("typelookup");
        this.observeFilesChanged = this.watchCommand("fileschanged");
        this.observeProjects = this.watchCommand("projects");
        this.observeProject = this.watchCommand("project");
        this.observeGetcodeactions = this.watchCommand("v2/getcodeactions");
        this.observeRuncodeaction = this.watchCommand("v2/runcodeaction");
        this.observeGettestcontext = this.watchCommand("gettestcontext");
    };
    ClientV2.prototype.getcodeactions = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        if (!request.Selection) {
            isNotNull(request.Line, 'request.Line must not be null');
            isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
            isNotNull(request.Column, 'request.Column must not be null');
            isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        }
        else {
            isNotNull(request.Selection.Start.Line, 'request.Selection.Start.Line must not be null');
            isAbove(request.Selection.Start.Line, this._lowestIndexValue - 1, "request.Selection.Start.Line must be greater than or equal to " + this._lowestIndexValue);
            isNotNull(request.Selection.Start.Column, 'request.Selection.Start.Column must not be null');
            isAbove(request.Selection.Start.Column, this._lowestIndexValue - 1, "request.Selection.Start.Column must be greater than or equal to " + this._lowestIndexValue);
            isNotNull(request.Selection.End.Line, 'request.Selection.End.Line must not be null');
            isAbove(request.Selection.End.Line, this._lowestIndexValue - 1, "request.Selection.End.Line must be greater than or equal to " + this._lowestIndexValue);
            isNotNull(request.Selection.End.Column, 'request.Selection.End.Column must not be null');
            isAbove(request.Selection.End.Column, this._lowestIndexValue - 1, "request.Selection.End.Column must be greater than or equal to " + this._lowestIndexValue);
        }
        return this.request("v2/getcodeactions", request, options);
    };
    ClientV2.prototype.getcodeactionsPromise = function (request, options) {
        return this.getcodeactions(request, options).toPromise();
    };
    ClientV2.prototype.runcodeaction = function (request, options) {
        isNotNull(request.FileName, 'request.FileName must not be null');
        isNotNull(request.Identifier, 'request.Identifier must not be null');
        if (!request.Selection) {
            isNotNull(request.Line, 'request.Line must not be null');
            isAbove(request.Line, this._lowestIndexValue - 1, "request.Line must be greater than or equal to " + this._lowestIndexValue);
            isNotNull(request.Column, 'request.Column must not be null');
            isAbove(request.Column, this._lowestIndexValue - 1, "request.Column must be greater than or equal to " + this._lowestIndexValue);
        }
        else {
            isNotNull(request.Selection.Start.Line, 'request.Selection.Start.Line must not be null');
            isAbove(request.Selection.Start.Line, this._lowestIndexValue - 1, "request.Selection.Start.Line must be greater than or equal to " + this._lowestIndexValue);
            isNotNull(request.Selection.Start.Column, 'request.Selection.Start.Column must not be null');
            isAbove(request.Selection.Start.Column, this._lowestIndexValue - 1, "request.Selection.Start.Column must be greater than or equal to " + this._lowestIndexValue);
            isNotNull(request.Selection.End.Line, 'request.Selection.End.Line must not be null');
            isAbove(request.Selection.End.Line, this._lowestIndexValue - 1, "request.Selection.End.Line must be greater than or equal to " + this._lowestIndexValue);
            isNotNull(request.Selection.End.Column, 'request.Selection.End.Column must not be null');
            isAbove(request.Selection.End.Column, this._lowestIndexValue - 1, "request.Selection.End.Column must be greater than or equal to " + this._lowestIndexValue);
        }
        return this.request("v2/runcodeaction", request, options);
    };
    ClientV2.prototype.runcodeactionPromise = function (request, options) {
        return this.runcodeaction(request, options).toPromise();
    };
    return ClientV2;
})(client_base_1.ClientBase);
exports.ClientV2 = ClientV2;
lodash_1.defaults(ClientV2.prototype, client_v1_1.ClientV1.prototype);
(function (Client) {
    Client.setupObservers = Client.prototype.setupObservers;
})(ClientV2);
