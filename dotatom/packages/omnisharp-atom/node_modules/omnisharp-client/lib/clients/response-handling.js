var lodash_1 = require("lodash");
exports.serverLineNumbers = [
    'Line', 'Column',
    'StartLine', 'StartColumn',
    'EndLine', 'EndColumn',
    'SelectionStartColumn', 'SelectionStartLine',
    'SelectionEndColumn', 'SelectionEndLine',
    'Selection.Start.Line', 'Selection.Start.Column',
    'Selection.End.Line', 'Selection.End.Column',
    'Location.Line', 'Location.Column',
    'Location.EndLine', 'Location.EndColumn',
];
exports.serverLineNumberArrays = [
    'Lines'
];
function requestMutator(data) {
    if (lodash_1.isArray(data)) {
        lodash_1.each(data, function (item) { return requestMutator(item); });
        return data;
    }
    lodash_1.each(exports.serverLineNumbers, function (path) {
        var hasPath = lodash_1.has(data, path);
        if (hasPath) {
            var value = lodash_1.get(data, path);
            value = value + 1;
            lodash_1.set(data, path, value);
        }
    });
    lodash_1.each(exports.serverLineNumberArrays, function (path) {
        var hasPath = lodash_1.has(data, path);
        if (hasPath) {
            var value = lodash_1.get(data, path);
            for (var i = 0; i < value.length; i++) {
                value[i] = value[i] + 1;
            }
            lodash_1.set(data, path, value);
        }
    });
    lodash_1.each(lodash_1.filter(data, function (z) { return lodash_1.isArray(z); }), function (item) { return requestMutator(item); });
    return data;
}
exports.requestMutator = requestMutator;
function responseMutator(data) {
    if (lodash_1.isArray(data)) {
        lodash_1.each(data, function (item) { return responseMutator(item); });
        return data;
    }
    lodash_1.each(exports.serverLineNumbers, function (path) {
        var hasPath = lodash_1.has(data, path);
        if (hasPath) {
            var value = lodash_1.get(data, path);
            value = value - 1;
            lodash_1.set(data, path, value);
        }
    });
    lodash_1.each(exports.serverLineNumberArrays, function (path) {
        var hasPath = lodash_1.has(data, path);
        if (hasPath) {
            var value = lodash_1.get(data, path);
            for (var i = 0; i < value.length; i++) {
                value[i] = value[i] + 1;
            }
            lodash_1.set(data, path, value);
        }
    });
    lodash_1.each(lodash_1.filter(data, function (z) { return lodash_1.isArray(z); }), function (item) { return responseMutator(item); });
    return data;
}
exports.responseMutator = responseMutator;
