{"_id":"parsimmon","_rev":"38-c17933efc1259812e173a10ae46a303f","name":"parsimmon","description":"A monadic LL(infinity) parser combinator library","dist-tags":{"latest":"0.7.0"},"versions":{"0.0.1":{"name":"parsimmon","version":"0.0.1","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json"],"main":"index.js","devDependencies":{"mocha":"*","uglify-js":"*"},"dependencies":{"pjs":"*"},"scripts":{"install":"make commonjs","test":"make test"},"_id":"parsimmon@0.0.1","dist":{"shasum":"7f60c432d2785e1516aaaeaf1550320fce41075d","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.0.1.tgz"},"_npmVersion":"1.1.49","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.0.5":{"name":"parsimmon","version":"0.0.5","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json"],"main":"index.js","devDependencies":{"mocha":"*","uglify-js":"2.x"},"dependencies":{"pjs":"3.x"},"scripts":{"install":"make commonjs","test":"make test"},"_id":"parsimmon@0.0.5","dist":{"shasum":"d51b14e600e6c22298460c8cee19365ebf53d4e3","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.0.5.tgz"},"_resolved":"tmp/parsimmon-0.0.5.tgz","_from":"tmp/parsimmon-0.0.5.tgz","_npmVersion":"1.2.14","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.0.6":{"name":"parsimmon","version":"0.0.6","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json"],"main":"index.js","devDependencies":{"mocha":"*","uglify-js":"2.x"},"dependencies":{"pjs":"3.x"},"scripts":{"install":"make commonjs","test":"make test"},"bugs":{"url":"https://github.com/jayferd/parsimmon/issues"},"_id":"parsimmon@0.0.6","dist":{"shasum":"551f3af12a041f54e15b7aa001ba87a0eec9bff1","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.0.6.tgz"},"_resolved":"tmp/parsimmon-0.0.6.tgz","_from":"tmp/parsimmon-0.0.6.tgz","_npmVersion":"1.2.25","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.1.0":{"name":"parsimmon","version":"0.1.0","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"3.x"},"scripts":{"install":"make commonjs","test":"make test"},"bugs":{"url":"https://github.com/jayferd/parsimmon/issues"},"_id":"parsimmon@0.1.0","dist":{"shasum":"b4a3d00ef34e588092a3f1695efb84620a6008a0","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.1.0.tgz"},"_resolved":"tmp/parsimmon-0.1.0.tgz","_from":"tmp/parsimmon-0.1.0.tgz","_npmVersion":"1.2.25","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.2.0":{"name":"parsimmon","version":"0.2.0","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"3.x"},"scripts":{"install":"make commonjs","test":"make test"},"bugs":{"url":"https://github.com/jayferd/parsimmon/issues"},"_id":"parsimmon@0.2.0","dist":{"shasum":"48e9a138522acc42a6c46ee4b1ba2243c78e4412","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.2.0.tgz"},"_resolved":"tmp/parsimmon-0.2.0.tgz","_from":"tmp/parsimmon-0.2.0.tgz","_npmVersion":"1.2.25","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.2.1":{"name":"parsimmon","version":"0.2.1","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json","build/parsimmon.commonjs.js"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"5.x"},"scripts":{"prepublish":"make commonjs","test":"make test"},"bugs":{"url":"https://github.com/jayferd/parsimmon/issues"},"homepage":"https://github.com/jayferd/parsimmon","_id":"parsimmon@0.2.1","dist":{"shasum":"da694fd56c38129b057e040132c258131b533be5","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.2.1.tgz"},"_resolved":"tmp/parsimmon-0.2.1.tgz","_from":"tmp/parsimmon-0.2.1.tgz","_npmVersion":"1.4.3","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.3.0":{"name":"parsimmon","version":"0.3.0","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json","build/parsimmon.commonjs.js"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"5.x"},"scripts":{"prepublish":"make commonjs","test":"make test"},"bugs":{"url":"https://github.com/jayferd/parsimmon/issues"},"homepage":"https://github.com/jayferd/parsimmon","_id":"parsimmon@0.3.0","dist":{"shasum":"6b59fcaca3604ff8edd816b9a48fcb0d3c851aa9","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.3.0.tgz"},"_resolved":"tmp/parsimmon-0.3.0.tgz","_from":"tmp/parsimmon-0.3.0.tgz","_npmVersion":"1.4.3","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.3.1":{"name":"parsimmon","version":"0.3.1","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json","build/parsimmon.commonjs.js","build/parsimmon.browser.js","build/parsimmon.browser.min.js"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"5.x"},"scripts":{"test":"make test"},"bugs":{"url":"https://github.com/jayferd/parsimmon/issues"},"homepage":"https://github.com/jayferd/parsimmon","_id":"parsimmon@0.3.1","dist":{"shasum":"5f661c6cfb44705d044ac9a1fabc97a88917f768","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.3.1.tgz"},"_resolved":"tmp/parsimmon-0.3.1.tgz","_from":"tmp/parsimmon-0.3.1.tgz","_npmVersion":"1.4.3","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.3.2":{"name":"parsimmon","version":"0.3.2","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json","build/parsimmon.commonjs.js","build/parsimmon.browser.js","build/parsimmon.browser.min.js"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"5.x"},"scripts":{"test":"make test"},"bugs":{"url":"https://github.com/jayferd/parsimmon/issues"},"homepage":"https://github.com/jayferd/parsimmon","_id":"parsimmon@0.3.2","dist":{"shasum":"cf013b350ad719768775b19abf8bf4aa3af6d68b","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.3.2.tgz"},"_resolved":"tmp/parsimmon-0.3.2.tgz","_from":"tmp/parsimmon-0.3.2.tgz","_npmVersion":"1.4.3","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.4.0":{"name":"parsimmon","version":"0.4.0","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json","build/parsimmon.commonjs.js","build/parsimmon.browser.js","build/parsimmon.browser.min.js"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"5.x"},"scripts":{"test":"make test"},"bugs":{"url":"https://github.com/jayferd/parsimmon/issues"},"homepage":"https://github.com/jayferd/parsimmon","_id":"parsimmon@0.4.0","dist":{"shasum":"072b13a0245fa2b9f02c5a9ae56a470bbcf02552","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.4.0.tgz"},"_resolved":"tmp/parsimmon-0.4.0.tgz","_from":"tmp/parsimmon-0.4.0.tgz","_npmVersion":"1.4.3","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.5.0":{"name":"parsimmon","version":"0.5.0","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jay Adkisson","email":"jjmadkisson at gmail dot com"},"repository":{"type":"git","url":"git://github.com/jayferd/parsimmon"},"files":["index.js","src","test","Makefile","package.json","build/parsimmon.commonjs.js","build/parsimmon.browser.js","build/parsimmon.browser.min.js"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"5.x"},"scripts":{"test":"make test"},"bugs":{"url":"https://github.com/jayferd/parsimmon/issues"},"homepage":"https://github.com/jayferd/parsimmon","_id":"parsimmon@0.5.0","dist":{"shasum":"07c96245e8d4b74de6de2d6af63f7500ff70e348","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.5.0.tgz"},"_resolved":"tmp/parsimmon-0.5.0.tgz","_from":"tmp/parsimmon-0.5.0.tgz","_npmVersion":"1.4.3","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"}],"directories":{}},"0.5.1":{"name":"parsimmon","version":"0.5.1","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jeanine Adkisson","email":"jneen at jneen dot net"},"repository":{"type":"git","url":"git://github.com/jneen/parsimmon"},"files":["index.js","src","test","Makefile","package.json","build/parsimmon.commonjs.js","build/parsimmon.browser.js","build/parsimmon.browser.min.js"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"5.x"},"scripts":{"test":"make test"},"bugs":{"url":"https://github.com/jneen/parsimmon/issues"},"homepage":"https://github.com/jneen/parsimmon","_id":"parsimmon@0.5.1","_shasum":"247c970d7d5e99a51115b16a106de96f0eb9303b","_resolved":"tmp/parsimmon-0.5.1.tgz","_from":"tmp/parsimmon-0.5.1.tgz","_npmVersion":"1.4.14","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"},{"name":"jneen","email":"jneen@jneen.net"}],"dist":{"shasum":"247c970d7d5e99a51115b16a106de96f0eb9303b","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.5.1.tgz"},"directories":{}},"0.6.0":{"name":"parsimmon","version":"0.6.0","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jeanine Adkisson","email":"jneen at jneen dot net"},"repository":{"type":"git","url":"git://github.com/jneen/parsimmon"},"files":["index.js","src","test","Makefile","package.json","build/parsimmon.commonjs.js","build/parsimmon.browser.js","build/parsimmon.browser.min.js"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"5.x"},"scripts":{"test":"make test"},"bugs":{"url":"https://github.com/jneen/parsimmon/issues"},"homepage":"https://github.com/jneen/parsimmon","_id":"parsimmon@0.6.0","_shasum":"6d1615e8cd3913a2a5438720afb7f073aec3e776","_resolved":"tmp/parsimmon-0.6.0.tgz","_from":"tmp/parsimmon-0.6.0.tgz","_npmVersion":"1.4.14","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"},{"name":"jneen","email":"jneen@jneen.net"}],"dist":{"shasum":"6d1615e8cd3913a2a5438720afb7f073aec3e776","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.6.0.tgz"},"directories":{}},"0.7.0":{"name":"parsimmon","version":"0.7.0","description":"A monadic LL(infinity) parser combinator library","keywords":["parsing","parse","parser combinators"],"author":{"name":"Jeanine Adkisson","email":"jneen at jneen dot net"},"repository":{"type":"git","url":"git://github.com/jneen/parsimmon"},"files":["index.js","src","test","Makefile","package.json","build/parsimmon.commonjs.js","build/parsimmon.browser.js","build/parsimmon.browser.min.js"],"main":"index.js","devDependencies":{"mocha":"1.8.x","chai":"1.5.x","uglify-js":"2.x"},"dependencies":{"pjs":"5.x"},"scripts":{"test":"make test"},"bugs":{"url":"https://github.com/jneen/parsimmon/issues"},"homepage":"https://github.com/jneen/parsimmon","_id":"parsimmon@0.7.0","_shasum":"652fc7cbade73c5edb42a266ec556c906d82c9fb","_resolved":"tmp/parsimmon-0.7.0.tgz","_from":"tmp/parsimmon-0.7.0.tgz","_npmVersion":"1.4.14","_npmUser":{"name":"jayferd","email":"jjmadkisson@gmail.com"},"maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"},{"name":"jneen","email":"jneen@jneen.net"}],"dist":{"shasum":"652fc7cbade73c5edb42a266ec556c906d82c9fb","tarball":"http://registry.npmjs.org/parsimmon/-/parsimmon-0.7.0.tgz"},"directories":{}}},"readme":"[![Build Status](https://secure.travis-ci.org/jneen/parsimmon.png)](http://travis-ci.org/jneen/parsimmon)\n\n# Parsimmon\n\n[![Parsimmon](http://i.imgur.com/wyKOf.png)](http://github.com/jneen/parsimmon)\n\n(by @jneen and @laughinghan)\n\nParsimmon is a small library for writing big parsers made up of lots of little parsers.  The API is inspired by parsec and Promises/A.\n\n## Quick Example\n\n``` js\nvar regex = Parsimmon.regex;\nvar string = Parsimmon.string;\nvar optWhitespace = Parsimmon.optWhitespace;\nvar lazy = Parsimmon.lazy;\n\nfunction lexeme(p) { return p.skip(optWhitespace); }\n\nvar lparen = lexeme(string('('));\nvar rparen = lexeme(string(')'));\n\nvar expr = lazy('an s-expression', function() { return form.or(atom) });\n\nvar number = lexeme(regex(/[0-9]+/).map(parseInt));\nvar id = lexeme(regex(/[a-z_]\\w*/i));\n\nvar atom = number.or(id);\nvar form = lparen.then(expr.many()).skip(rparen);\n\nexpr.parse('3').value // => 3\nexpr.parse('(add (mul 10 (add 3 4)) (add 7 8))').value\n  // => ['add', ['mul', 10, ['add', 3, 4]], ['add', 7, 8]]\n```\n\n## Explanation\n\nA Parsimmon parser is an object that represents an action on a stream\nof text, and the promise of either an object yielded by that action on\nsuccess or a message in case of failure.  For example, `string('foo')`\nyields the string `'foo'` if the beginning of the stream is `'foo'`,\nand otherwise fails.\n\nThe combinator method `.map` is used to transform the yielded value.\nFor example,\n\n``` js\nstring('foo').map(function(x) { return x + 'bar'; })\n```\n\nwill yield `'foobar'` if the stream starts with `'foo'`.  The parser\n\n``` js\ndigits.map(function(x) { return parseInt(x) * 2; })\n```\n\nwill yield the number 24 when it encounters the string '12'.  The method\n`.result` can be used to set a constant result.\n\nCalling `.parse(str)` on a parser parses the string, and returns an\nobject with a `status` flag, indicating whether the parse succeeded.\nIf it succeeded, the `value` attribute will contain the yielded value.\nOtherwise, the `index` and `expected` attributes will contain the\nindex of the parse error, and a message indicating what was expected.\nThe error object can be passed along with the original source to\n`Parsimmon.formatError(source, error)` to obtain a human-readable\nerror string.\n\n## Full API\n\n### Included parsers / parser generators:\n  - `Parsimmon.string(\"my-string\")` is a parser that expects to find\n    `\"my-string\"`, and will yield the same.\n  - `Parsimmon.regex(/myregex/, group=0)` is a parser that expects the stream\n    to match the given regex, and yields the given match group, or the\n    entire match.\n  - `Parsimmon.succeed(result)` is a parser that doesn't consume any of\n    the string, and yields `result`.\n  - `Parsimmon.seq(p1, p2, ... pn)` accepts a variable number of parsers\n    that it expects to find in order, yielding an array of the results.\n  - `Parsimmon.alt(p1, p2, ... pn)` accepts a variable number of parsers,\n    and yields the value of the first one that succeeds, backtracking in between.\n  - `Parsimmon.lazy(f)` accepts a function that returns a parser, which\n    is evaluated the first time the parser is used.  This is useful for\n    referencing parsers that haven't yet been defined.\n  - `Parsimmon.lazy(desc, f)` is the same as `Parsimmon.lazy` but also\n    sets `desc` as the expected value (see `.desc()` below)\n  - `Parsimmon.fail(message)`\n  - `Parsimmon.letter` is equivalent to `Parsimmon.regex(/[a-z]/i)`\n  - `Parsimmon.letters` is equivalent to `Parsimmon.regex(/[a-z]*/i)`\n  - `Parsimmon.digit` is equivalent to `Parsimmon.regex(/[0-9]/)`\n  - `Parsimmon.digits` is equivalent to `Parsimmon.regex(/[0-9]*/)`\n  - `Parsimmon.whitespace` is equivalent to `Parsimmon.regex(/\\s+/)`\n  - `Parsimmon.optWhitespace` is equivalent to `Parsimmon.regex(/\\s*/)`\n  - `Parsimmon.any` consumes and yields the next character of the stream.\n  - `Parsimmon.all` consumes and yields the entire remainder of the stream.\n  - `Parsimmon.eof` expects the end of the stream.\n  - `Parsimmon.index` is a parser that yields the current index of the parse.\n  - `Parsimmon.test(pred)` yield a single characer if it passes the predicate.\n  - `Parsimmon.takeWhile(pred)` yield a string containing all the next characters that pass the predicate.\n\n### Adding base parsers\n\nYou can add a primitive parser (similar to the included ones) by using\n`Parsimmon.custom`. This is an example of how to create a parser that matches\nany character except the one provided:\n\n```js\nfunction notChar(char) {\n  return Parsimmon.custom(function(success, failure) {\n    return function(stream, i) {\n      if (stream.charAt(i) !== char && stream.length <= i) {\n        return success(i+1, stream.charAt(i));\n      }\n      return failure(i, 'anything different than \"' + char + '\"');\n    }\n  });\n}\n```\n\nThis parser can then be used and composed the same way all the existing ones are\nused and composed, for example:\n\n```js\nvar parser = seq(string('a'), notChar('b').times(5));\nparser.parse('accccc');\n```\n\n### Parser methods\n  - `parser.or(otherParser)`:\n    returns a new parser which tries `parser`, and if it fails uses `otherParser`.\n  - `parser.chain(function(result) { return anotherParser; })`:\n    returns a new parser which tries `parser`, and on success calls the\n    given function with the result of the parse, which is expected to\n    return another parser, which will be tried next.  This allows you\n    to dynamically decide how to continue the parse, which is impossible\n    with the other combinators.\n  - `parser.then(anotherParser)`:\n    expects `anotherParser` to follow `parser`, and yields the result\n    of `anotherParser`.  NB: the result of `parser` here is ignored.\n  - `parser.map(function(result) { return anotherResult; })`:\n    transforms the output of `parser` with the given function.\n  - `parser.skip(otherParser)`\n    expects `otherParser` after `parser`, but preserves the yield value\n    of `parser`.\n  - `parser.result(aResult)`:\n    returns a new parser with the same behavior, but which yields `aResult`.\n  - `parser.many()`:\n    expects `parser` zero or more times, and yields an array of the results.\n  - `parser.times(n)`:\n    expects `parser` exactly `n` times, and yields an array of the results.\n  - `parser.times(min, max)`:\n    expects `parser` between `min` and `max` times, and yields an array\n    of the results.\n  - `parser.atMost(n)`:\n    expects `parser` at most `n` times.  Yields an array of the results.\n  - `parser.atLeast(n)`:\n    expects `parser` at least `n` times.  Yields an array of the results.\n  - `parser.mark()` yields an object with `start`, `value`, and `end` keys, where\n    `value` is the original value yielded by the parser, and `start` and `end` are\n    the indices in the stream that contain the parsed text.\n  - `parser.desc(description)` returns a new parser whose failure message is the passed\n    description.  For example, `string('x').desc('the letter x')` will indicate that\n    'the letter x' was expected.\n\n## Tips and patterns\n\nThese apply to most parsers for traditional langauges - it's possible\nyou may need to do something different for yours!\n\nFor most parsers, the following format is helpful:\n\n1. define a `lexeme` function to skip all the stuff you don't care\n   about (whitespace, comments, etc).  You may need multiple types of lexemes.\n   For example,\n\n    ``` js\n    var ignore = whitespace.or(comment.many());\n    function lexeme(p) { return p.skip(ignore); }\n    ```\n\n1. Define all your lexemes first.  These should yield native javascript values.\n\n    ``` js\n    var lparen = lexeme(string('('));\n    var rparen = lexeme(string(')'));\n    var number = lexeme(regex(/[0-9]+/)).map(parseInt);\n    ```\n\n1. Forward-declare one or more top-level expressions with `lazy`,\n   referring to parsers that have not yet been defined.  Generally, this\n   takes the form of a large `.alt()` call\n\n    ``` js\n    var expr = lazy('an expression', function() { return Parsimmon.alt(p1, p2, ...); });\n    ```\n\n1. Then build your parsers from the inside out - these should return\n   AST nodes or other objects specific to your domain.\n\n    ``` js\n    var p1 = ...\n    var p2 = ...\n    ```\n\n1. Finally, export your top-level parser.  Remember to skip ignored\n   stuff at the beginning.\n\n    ``` js\n    return ignore.then(expr.many());\n    ```\n\n### Fantasyland\n\n[fantasyland]: https://github.com/fantasyland/fantasy-land \"Fantasyland\"\n[fantasyland-logo]: https://github.com/fantasyland/fantasy-land/raw/master/logo.png\n\n![][fantasyland-logo]\n\nParsimmon is also compatible with [fantasyland][].  It is a Semigroup, an Applicative Functor and a Monad.\n","maintainers":[{"name":"jayferd","email":"jjmadkisson@gmail.com"},{"name":"jneen","email":"jneen@jneen.net"}],"time":{"modified":"2015-03-14T18:40:15.352Z","created":"2012-11-18T22:10:42.116Z","0.0.1":"2012-11-18T22:10:50.127Z","0.0.3":"2013-03-24T05:26:23.754Z","0.0.5":"2013-04-10T17:01:30.998Z","0.0.6":"2013-09-24T21:46:42.003Z","0.1.0":"2014-01-09T20:25:38.195Z","0.2.0":"2014-01-29T23:55:12.060Z","0.2.1":"2014-03-10T05:35:31.245Z","0.3.0":"2014-03-12T22:09:41.708Z","0.3.1":"2014-03-12T22:19:46.491Z","0.3.2":"2014-04-18T18:30:25.623Z","0.4.0":"2014-04-18T22:33:57.083Z","0.5.0":"2014-06-15T17:53:56.079Z","0.5.1":"2014-06-30T23:49:30.496Z","0.6.0":"2015-02-24T16:30:56.414Z","0.7.0":"2015-03-14T18:40:15.352Z"},"author":{"name":"Jeanine Adkisson","email":"jneen at jneen dot net"},"repository":{"type":"git","url":"git://github.com/jneen/parsimmon"},"readmeFilename":"README.md","homepage":"https://github.com/jneen/parsimmon","keywords":["parsing","parse","parser combinators"],"bugs":{"url":"https://github.com/jneen/parsimmon/issues"},"_attachments":{},"_etag":"\"D1ZQ0FK769L22XR075WPJPS35\""}