{"_id":"stat-mode","_rev":"7-3ba607e5e52ca516045a3d62164d9ffe","name":"stat-mode","description":"Offers convenient getters and setters for the stat `mode`","dist-tags":{"latest":"0.2.1"},"versions":{"0.0.1":{"name":"stat-mode","version":"0.0.1","description":"Offers convenient getters and setters for the stat `mode`","main":"index.js","scripts":{"test":"mocha --reporter spec"},"repository":{"type":"git","url":"git://github.com/TooTallNate/stat-mode.git"},"keywords":["stat","mode","owner","group","others"],"author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://n8.io/"},"license":"MIT","bugs":{"url":"https://github.com/TooTallNate/stat-mode/issues"},"homepage":"https://github.com/TooTallNate/stat-mode","_id":"stat-mode@0.0.1","dist":{"shasum":"6f8b1d46f007c78775d341de35fc7a1c1003dff3","tarball":"http://registry.npmjs.org/stat-mode/-/stat-mode-0.0.1.tgz"},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.1.0":{"name":"stat-mode","version":"0.1.0","description":"Offers convenient getters and setters for the stat `mode`","main":"index.js","repository":{"type":"git","url":"git://github.com/TooTallNate/stat-mode.git"},"keywords":["stat","mode","owner","group","others"],"author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://n8.io/"},"license":"MIT","bugs":{"url":"https://github.com/TooTallNate/stat-mode/issues"},"homepage":"https://github.com/TooTallNate/stat-mode","_id":"stat-mode@0.1.0","dist":{"shasum":"0cfbec3af29e6059122d2f7efc3e96a8203556a9","tarball":"http://registry.npmjs.org/stat-mode/-/stat-mode-0.1.0.tgz"},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.2.0":{"name":"stat-mode","version":"0.2.0","description":"Offers convenient getters and setters for the stat `mode`","main":"index.js","repository":{"type":"git","url":"git://github.com/TooTallNate/stat-mode.git"},"keywords":["stat","mode","owner","group","others"],"author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://n8.io/"},"license":"MIT","bugs":{"url":"https://github.com/TooTallNate/stat-mode/issues"},"homepage":"https://github.com/TooTallNate/stat-mode","devDependencies":{"mocha":"^1.17.1"},"scripts":{"test":"mocha --reporter spec"},"_id":"stat-mode@0.2.0","dist":{"shasum":"eb0bf1e36eed1a0f57223ce2ab345920af66502d","tarball":"http://registry.npmjs.org/stat-mode/-/stat-mode-0.2.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"directories":{}},"0.2.1":{"name":"stat-mode","version":"0.2.1","description":"Offers convenient getters and setters for the stat `mode`","main":"index.js","repository":{"type":"git","url":"git://github.com/TooTallNate/stat-mode.git"},"keywords":["stat","mode","owner","group","others","chmod","octal","symbolic","permissions"],"author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://n8.io/"},"license":"MIT","bugs":{"url":"https://github.com/TooTallNate/stat-mode/issues"},"homepage":"https://github.com/TooTallNate/stat-mode","devDependencies":{"mocha":"~1.18.2"},"scripts":{"test":"mocha --reporter spec"},"gitHead":"e4d6f1dc65c2a5d47549143fe8f0f198eeab939f","_id":"stat-mode@0.2.1","_shasum":"d714e08a4ed157089c1340f76fee54046c8242d6","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.1","_npmUser":{"name":"tootallnate","email":"nathan@tootallnate.net"},"maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"dist":{"shasum":"d714e08a4ed157089c1340f76fee54046c8242d6","tarball":"http://registry.npmjs.org/stat-mode/-/stat-mode-0.2.1.tgz"},"directories":{}}},"readme":"stat-mode\n=========\n### Offers convenient getters and setters for the stat `mode`\n[![Build Status](https://travis-ci.org/TooTallNate/stat-mode.svg?branch=master)](https://travis-ci.org/TooTallNate/stat-mode)\n\nYou know that `mode` property on the `fs.Stat` object that you probably\nusually just ignore? Well there's acutally a lot of information packed\ninto that number.\n\nThe specific information includes:\n\n * What the [\"file type\"](http://en.wikipedia.org/wiki/Unix_file_types) of file it is\n * Whether or not the [`setuid` and `setgid` bits](http://en.wikipedia.org/wiki/Setuid) are set\n * Whether or not the [`sticky` bit](http://en.wikipedia.org/wiki/Sticky_bit) is set\n * The [_read_, _write_, and _execute_ permissions for the _owner_, _group_ and _others_](http://en.wikipedia.org/wiki/File_system_permissions)\n\nThis module helps you extract that information.\n\nAll the getters are also setters, which change the `mode` property\nappropriately. This is useful for when you have to build up your\nown `fs.Stat` object for whatever reason (like when implementing a\nFUSE filesystem.\n\n\nInstallation\n------------\n\n``` bash\n$ npm install stat-mode\n```\n\n\nExample\n-------\n\nSo given some arbitrary file (let's say `/bin/echo`):\n\n``` bash\n$ ls -l /bin/echo\n-rwxr-xr-x 1 root wheel 14128 Aug 11  2013 /bin/echo\n```\n\nWe can inspect it using the `fs.stat()` call and creating a `Mode` instance\non top of it.\n\n``` javascript\nvar fs = require('fs');\nvar Mode = require('stat-mode');\n\nfs.stat('/bin/echo', function (err, stat) {\n  if (err) throw err;\n\n  // create a \"Mode\" instance on top of the `stat` object\n  var mode = new Mode(stat);\n\n  // you can check what kind of file it is:\n  mode.isDirectory();\n  // false\n\n  mode.isFIFO();\n  // false\n\n  mode.isFile();\n  // true\n\n\n  // and you can also check individual owner, group and others permissions\n  mode.owner.read;\n  // true\n\n  mode.owner.write;\n  // true\n\n  mode.owner.execute;\n  // true\n\n  mode.group.read;\n  // true\n\n  mode.group.write;\n  // false\n\n  mode.group.execute;\n  // true\n\n  mode.others.read;\n  // true\n\n  mode.others.write;\n  // false\n\n  mode.others.execute;\n  // true\n\n\n  // the `toString()` output resembes the `ls -l` output:\n  mode.toString();\n  // '-rwxr-xr-x'\n});\n```\n\n\nAPI\n---\n\n### new Mode(Object stat) → Mode\n\nYou must pass in \"stat\" object to the `Mode` constructor. The \"stat\"\nobject can be a real `fs.Stat` instance, or really any Object with a\n`mode` property.\n\n#### mode.isDirectory([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"directory\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"directory\".\n\n#### mode.isFile([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"file\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"file\".\n\n#### mode.isBlockDevice([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"block device\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"block device\".\n\n#### mode.isCharacterDevice([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"character device\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"character\ndevice\".\n\n#### mode.isSymbolicLink([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"symbolic link\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"symbolic link\".\n\n#### mode.isFIFO([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"FIFO\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"FIFO\".\n\n#### mode.isSocket([Boolean set]) → Boolean\n\nReturns `true` if the mode's file type is \"socket\", `false` otherwise.\nIf you pass `true` to the function, then the mode will be set to \"socket\".\n\n#### mode.owner.read → Boolean [Getter/Setter]\n\n`true` if the mode is \"owner read\" rights, `false` otherwise.\n\n#### mode.owner.write → Boolean [Getter/Setter]\n\n`true` if the mode is \"owner write\" rights, `false` otherwise.\n\n#### mode.owner.execute → Boolean [Getter/Setter]\n\n`true` if the mode is \"owner execute\" rights, `false` otherwise.\n\n#### mode.group.read → Boolean [Getter/Setter]\n\n`true` if the mode is \"group read\" rights, `false` otherwise.\n\n#### mode.group.write → Boolean [Getter/Setter]\n\n`true` if the mode is \"group write\" rights, `false` otherwise.\n\n#### mode.group.execute → Boolean [Getter/Setter]\n\n`true` if the mode is \"group execute\" rights, `false` otherwise.\n\n#### mode.others.read → Boolean [Getter/Setter]\n\n`true` if the mode is \"others read\" rights, `false` otherwise.\n\n#### mode.others.write → Boolean [Getter/Setter]\n\n`true` if the mode is \"others write\" rights, `false` otherwise.\n\n#### mode.others.execute → Boolean [Getter/Setter]\n\n`true` if the mode is \"others execute\" rights, `false` otherwise.\n","maintainers":[{"name":"tootallnate","email":"nathan@tootallnate.net"}],"time":{"modified":"2015-04-07T06:27:14.710Z","created":"2014-03-01T21:44:49.572Z","0.0.1":"2014-03-01T21:44:49.572Z","0.1.0":"2014-03-02T01:00:13.209Z","0.2.0":"2014-04-02T18:57:36.405Z","0.2.1":"2015-04-07T06:27:14.710Z"},"homepage":"https://github.com/TooTallNate/stat-mode","keywords":["stat","mode","owner","group","others","chmod","octal","symbolic","permissions"],"repository":{"type":"git","url":"git://github.com/TooTallNate/stat-mode.git"},"author":{"name":"Nathan Rajlich","email":"nathan@tootallnate.net","url":"http://n8.io/"},"bugs":{"url":"https://github.com/TooTallNate/stat-mode/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{},"_etag":"\"1CVQKPZBT5MG4PVLIQF0GVVYZ\""}