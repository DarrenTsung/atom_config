{"_id":"duplex","_rev":"25-e5e1d12918de7a373dd263659692648e","name":"duplex","description":"base class for a duplex stream","dist-tags":{"latest":"1.0.0"},"versions":{"0.0.1":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.0.1","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"readme":"","_id":"duplex@0.0.1","dist":{"shasum":"4b0152627ee5c820160c45dfe058a2e34d2704d8","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.0.1.tgz"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.1.0":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.1.0","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"readme":"","_id":"duplex@0.1.0","dist":{"shasum":"6f8a4182a49899e3bb73c1ce798ba24c0c6e20ce","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.1.0.tgz"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.1.1":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.1.1","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"readme":"# duplex\n\nSimple base class for [duplex](https://github.com/dominictarr/stream-spec#duplex) streams, that automatically handles pausing and buffering.\n\n``` js\n\nvar duplex = require('duplex')\n\nvar d = duplex()\n  .on('write', function (data) {\n    d.sendData(data)\n  })\n  .on('ended', function () {\n    d.sendEnd()\n  })\n```\n\n## API\n\n### on('write', function (data))\n\nEmitted when `write(data)` is called.\n\n### on('ended', function ())\n\nEmitted when `end()` is called\n\n### sendData(data)\n\nAdd `data` to the output buffer. \n`'data'` will be emitted if there the stream is not paused.\n\n### sendEnd()\n\nEmit `'end'` after the output buffer drains.  \nWill be emitted immediately, it the buffer is empty.\n\n### pause()\n\nSet the readable side of the stream into paused state.  \nThis will prevent it from emitting 'data' or or 'end'\nuntil resume is called.\n\n### resume()\nSet the reabable side of the stream into the unpaused state.  \nThis will allow it to emit `'data'` and `'end'` events.  \nIf there there is any data in the output buffer,  \nIt will start draining immediately.  \n\n## Automatic Behaviours\n\n`destroy()` is called automitically after both sides of the stream has ended.\n`write()==false` after the stream emits `'pause'`,  \nand `write()==true` after the stream emits `'drain'`.\nThe user is responsible for emitting `'pause'` and `'drain'`.\n\nThe stream will call `resume()` in the next tick, unless `pause()` is called manually.\nif `resume()` is manually called before the next tick, the stream will start emitting data\nimmediately.\n\n## License\n\nMIT / APACHE 2\n","_id":"duplex@0.1.1","dist":{"shasum":"de9c7dcf89c4dd87352c169fe3bc86e9f63cba62","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.1.1.tgz"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.1.2":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.1.2","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"readme":"# duplex\n\nSimple base class for [duplex](https://github.com/dominictarr/stream-spec#duplex) streams, that automatically handles pausing and buffering.\n\n``` js\n\nvar duplex = require('duplex')\n\nvar d = duplex()\n  .on('write', function (data) {\n    d.sendData(data)\n  })\n  .on('ended', function () {\n    d.sendEnd()\n  })\n```\n\n## API\n\n### on('write', function (data))\n\nEmitted when `write(data)` is called.\n\n### on('ended', function ())\n\nEmitted when `end()` is called\n\n### sendData(data)\n\nAdd `data` to the output buffer. \n`'data'` will be emitted if there the stream is not paused.\n\n### sendEnd()\n\nEmit `'end'` after the output buffer drains.  \nWill be emitted immediately, it the buffer is empty.\n\n### pause()\n\nSet the readable side of the stream into paused state.  \nThis will prevent it from emitting 'data' or or 'end'\nuntil resume is called.\n\n### resume()\nSet the reabable side of the stream into the unpaused state.  \nThis will allow it to emit `'data'` and `'end'` events.  \nIf there there is any data in the output buffer,  \nIt will start draining immediately.  \n\n## Automatic Behaviours\n\n`destroy()` is called automitically after both sides of the stream has ended.\n`write()==false` after the stream emits `'pause'`,  \nand `write()==true` after the stream emits `'drain'`.\nThe user is responsible for emitting `'pause'` and `'drain'`.\n\nThe stream will call `resume()` in the next tick, unless `pause()` is called manually.\nif `resume()` is manually called before the next tick, the stream will start emitting data\nimmediately.\n\n## License\n\nMIT / APACHE 2\n","_id":"duplex@0.1.2","dist":{"shasum":"0d8d0dd246b0b4a78ba66701fc16aa8978888165","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.1.2.tgz"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.1.3":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.1.3","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"scripts":{"test":"node test/index.js"},"readme":"# duplex\n\n<img src=https://secure.travis-ci.org/dominictarr/duplex.png?branch=master>\n\n\nSimple base class for [duplex](https://github.com/dominictarr/stream-spec#duplex) streams, that automatically handles pausing and buffering.\n\n``` js\n\nvar duplex = require('duplex')\n\nvar d = duplex()\n  .on('write', function (data) {\n    d.sendData(data)\n  })\n  .on('ended', function () {\n    d.sendEnd()\n  })\n```\n\n## API\n\n### on('write', function (data))\n\nEmitted when `write(data)` is called.\n\n### on('ended', function ())\n\nEmitted when `end()` is called\n\n### sendData(data)\n\nAdd `data` to the output buffer. \n`'data'` will be emitted if there the stream is not paused.\n\n### sendEnd()\n\nEmit `'end'` after the output buffer drains.  \nWill be emitted immediately, it the buffer is empty.\n\n### pause()\n\nSet the readable side of the stream into paused state.  \nThis will prevent it from emitting 'data' or or 'end'\nuntil resume is called.\n\n### resume()\nSet the reabable side of the stream into the unpaused state.  \nThis will allow it to emit `'data'` and `'end'` events.  \nIf there there is any data in the output buffer,  \nIt will start draining immediately.  \n\n## Automatic Behaviours\n\n`destroy()` is called automitically after both sides of the stream has ended.\n`write()==false` after the stream emits `'pause'`,  \nand `write()==true` after the stream emits `'drain'`.\nThe user is responsible for emitting `'pause'` and `'drain'`.\n\nThe stream will call `resume()` in the next tick, unless `pause()` is called manually.\nif `resume()` is manually called before the next tick, the stream will start emitting data\nimmediately.\n\n## License\n\nMIT / APACHE 2\n","_id":"duplex@0.1.3","dist":{"shasum":"d1a0dd6c6f8eaa017b7c59f07676c26afdfdfe18","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.1.3.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.1.4":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.1.4","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"scripts":{"test":"node test/index.js"},"readme":"# duplex\n\n<img src=https://secure.travis-ci.org/dominictarr/duplex.png?branch=master>\n\n\nSimple base class for [duplex](https://github.com/dominictarr/stream-spec#duplex) streams, that automatically handles pausing and buffering.\n\n``` js\n\nvar duplex = require('duplex')\n\nvar d = duplex()\n  .on('write', function (data) {\n    d.sendData(data)\n  })\n  .on('ended', function () {\n    d.sendEnd()\n  })\n```\n\n## API\n\n### on('write', function (data))\n\nEmitted when `write(data)` is called.\n\n### on('ended', function ())\n\nEmitted when `end()` is called\n\n### sendData(data)\n\nAdd `data` to the output buffer. \n`'data'` will be emitted if there the stream is not paused.\n\n### sendEnd()\n\nEmit `'end'` after the output buffer drains.  \nWill be emitted immediately, it the buffer is empty.\n\n### pause()\n\nSet the readable side of the stream into paused state.  \nThis will prevent it from emitting 'data' or or 'end'\nuntil resume is called.\n\n### resume()\nSet the reabable side of the stream into the unpaused state.  \nThis will allow it to emit `'data'` and `'end'` events.  \nIf there there is any data in the output buffer,  \nIt will start draining immediately.  \n\n## Automatic Behaviours\n\n`destroy()` is called automitically after both sides of the stream has ended.\n`write()==false` after the stream emits `'pause'`,  \nand `write()==true` after the stream emits `'drain'`.\nThe user is responsible for emitting `'pause'` and `'drain'`.\n\nThe stream will call `resume()` in the next tick, unless `pause()` is called manually.\nif `resume()` is manually called before the next tick, the stream will start emitting data\nimmediately.\n\n## License\n\nMIT / APACHE 2\n","_id":"duplex@0.1.4","dist":{"shasum":"9ee2006ac30eeebc168fa0b6a39306ce2d2c04f4","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.1.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.2.0":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.2.0","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"scripts":{"test":"node test/index.js"},"readme":"# duplex\n\n<img src=https://secure.travis-ci.org/dominictarr/duplex.png?branch=master>\n\n\nSimple base class for [duplex](https://github.com/dominictarr/stream-spec#duplex) streams, that automatically handles pausing and buffering.\n\n``` js\n\nvar duplex = require('duplex')\n\nvar d = duplex()\n  .on('write', function (data) {\n    d.sendData(data)\n  })\n  .on('ended', function () {\n    d.sendEnd()\n  })\n```\n\n## API\n\n### on('write', function (data))\n\nEmitted when `write(data)` is called.\n\n### on('ended', function ())\n\nEmitted when `end()` is called\n\n### sendData(data)\n\nAdd `data` to the output buffer. \n`'data'` will be emitted if there the stream is not paused.\n\n### sendEnd()\n\nEmit `'end'` after the output buffer drains.  \nWill be emitted immediately, it the buffer is empty.\n\n### pause()\n\nSet the readable side of the stream into paused state.  \nThis will prevent it from emitting 'data' or or 'end'\nuntil resume is called.\n\n### resume()\nSet the reabable side of the stream into the unpaused state.  \nThis will allow it to emit `'data'` and `'end'` events.  \nIf there there is any data in the output buffer,  \nIt will start draining immediately.  \n\n## Automatic Behaviours\n\n`destroy()` is called automitically after both sides of the stream has ended.\n`write()==false` after the stream emits `'pause'`,  \nand `write()==true` after the stream emits `'drain'`.\nThe user is responsible for emitting `'pause'` and `'drain'`.\n\nThe stream will call `resume()` in the next tick, unless `pause()` is called manually.\nif `resume()` is manually called before the next tick, the stream will start emitting data\nimmediately.\n\n## License\n\nMIT / APACHE 2\n","_id":"duplex@0.2.0","dist":{"shasum":"01fba39774ecfdbb307c336453c1b7c0844bcc92","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.2.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.2.1":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.2.1","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"scripts":{"test":"node test/index.js"},"readme":"# duplex\n\n<img src=https://secure.travis-ci.org/dominictarr/duplex.png?branch=master>\n\n\nSimple base class for [duplex](https://github.com/dominictarr/stream-spec#duplex) streams, that automatically handles pausing and buffering.\n\n``` js\n\nvar duplex = require('duplex')\n\nvar d = duplex()\n  .on('_data', function (data) {\n    d.sendData(data)\n  })\n  .on('_end', function () {\n    d.sendEnd()\n  })\n```\n\n## API\n\n### on('_data', function (data))\n\nEmitted when `write(data)` is called.\n\n### on('_end', function ())\n\nEmitted when `end()` is called\n\n### _data(data)\n\nAdd `data` to the output buffer. \n`'data'` will be emitted if the stream is not paused.\n\n### _end()\n\nCap the output buffer. no more data events may be added.\n`'end'` will be emitted after the buffer drains, \nor immediately, if the stream is unpaused.\n\n### pause()\n\nPause the readable side of the stream.  \nThis will prevent it from emitting 'data' or or 'end'\nuntil resume is called.\n\n### resume()\nUnpause the readable side of the stream.  \nThis will allow it to emit `'data'` and `'end'` events.  \nIf there there is any data in the output buffer,  \nIt will start draining immediately.  \n\n## _pause(), emit('pause')\n\nPause the writable side of the stream. this will cause write() to return false,\nso any streams piping into this stream will pause after thier next write.\n\n## emit('drain')\n\nUnpause the writable side of the stream. This will cause `Stream#pipe` to call `resume()`\non any streams piping to this stream.\n\n## Automatic Behaviours\n\n`destroy()` is called automatically after both sides of the stream have ended.\n`write()==false` after the stream emits `'pause'`,  \nand `write()==true` after the stream emits `'drain'`.\nThe user is responsible for emitting `'pause'` and `'drain'`.\n\n`resume()` will be called on `nextTick`, unless `pause()` was called manually.\nIf `resume()` is manually called before the `nextTick`, the stream will start emitting data\nimmediately.\n\n## License\n\nMIT / APACHE 2\n","_id":"duplex@0.2.1","dist":{"shasum":"5be04b1176a8d6896a1ad55be7fd275466d10a04","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.2.1.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.2.2":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.2.2","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"scripts":{"test":"node test/index.js"},"readme":"# duplex\n\n<img src=https://secure.travis-ci.org/dominictarr/duplex.png?branch=master>\n\n\nSimple base class for [duplex](https://github.com/dominictarr/stream-spec#duplex) streams, that automatically handles pausing and buffering.\n\n``` js\n\nvar duplex = require('duplex')\n\nvar d = duplex()\n  .on('_data', function (data) {\n    d.sendData(data)\n  })\n  .on('_end', function () {\n    d.sendEnd()\n  })\n```\n\n## API\n\n### on('_data', function (data))\n\nEmitted when `write(data)` is called.\n\n### on('_end', function ())\n\nEmitted when `end()` is called\n\n### _data(data)\n\nAdd `data` to the output buffer. \n`'data'` will be emitted if the stream is not paused.\n\n### _end()\n\nCap the output buffer. no more data events may be added.\n`'end'` will be emitted after the buffer drains, \nor immediately, if the stream is unpaused.\n\n### pause()\n\nPause the readable side of the stream.  \nThis will prevent it from emitting 'data' or or 'end'\nuntil resume is called.\n\n### resume()\nUnpause the readable side of the stream.  \nThis will allow it to emit `'data'` and `'end'` events.  \nIf there there is any data in the output buffer,  \nIt will start draining immediately.  \n\n## _pause(), emit('pause')\n\nPause the writable side of the stream. this will cause write() to return false,\nso any streams piping into this stream will pause after thier next write.\n\n## emit('drain')\n\nUnpause the writable side of the stream. This will cause `Stream#pipe` to call `resume()`\non any streams piping to this stream.\n\n## Automatic Behaviours\n\n`destroy()` is called automatically after both sides of the stream have ended.\n`write()==false` after the stream emits `'pause'`,  \nand `write()==true` after the stream emits `'drain'`.\nThe user is responsible for emitting `'pause'` and `'drain'`.\n\n`resume()` will be called on `nextTick`, unless `pause()` was called manually.\nIf `resume()` is manually called before the `nextTick`, the stream will start emitting data\nimmediately.\n\n## License\n\nMIT / APACHE 2\n","_id":"duplex@0.2.2","dist":{"shasum":"c31cfde553dc96121169a3f4e14054e351959d43","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.2.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"0.2.4":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"0.2.4","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"scripts":{"test":"node test/index.js"},"readme":"# duplex\n\n<img src=https://secure.travis-ci.org/dominictarr/duplex.png?branch=master>\n\n\nSimple base class for [duplex](https://github.com/dominictarr/stream-spec#duplex) streams, that automatically handles pausing and buffering.\n\n``` js\n\nvar duplex = require('duplex')\n\nvar d = duplex()\n  .on('_data', function (data) {\n    d.sendData(data)\n  })\n  .on('_end', function () {\n    d.sendEnd()\n  })\n```\n\n## API\n\n### on('_data', function (data))\n\nEmitted when `write(data)` is called.\n\n### on('_end', function ())\n\nEmitted when `end()` is called\n\n### _data(data)\n\nAdd `data` to the output buffer. \n`'data'` will be emitted if the stream is not paused.\n\n### _end()\n\nCap the output buffer. no more data events may be added.\n`'end'` will be emitted after the buffer drains, \nor immediately, if the stream is unpaused.\n\n### pause()\n\nPause the readable side of the stream.  \nThis will prevent it from emitting 'data' or or 'end'\nuntil resume is called.\n\n### resume()\nUnpause the readable side of the stream.  \nThis will allow it to emit `'data'` and `'end'` events.  \nIf there there is any data in the output buffer,  \nIt will start draining immediately.  \n\n## _pause(), emit('pause')\n\nPause the writable side of the stream. this will cause write() to return false,\nso any streams piping into this stream will pause after thier next write.\n\n## emit('drain')\n\nUnpause the writable side of the stream. This will cause `Stream#pipe` to call `resume()`\non any streams piping to this stream.\n\n## Automatic Behaviours\n\n`destroy()` is called automatically after both sides of the stream have ended.\n`write()==false` after the stream emits `'pause'`,  \nand `write()==true` after the stream emits `'drain'`.\nThe user is responsible for emitting `'pause'` and `'drain'`.\n\n`resume()` will be called on `nextTick`, unless `pause()` was called manually.\nIf `resume()` is manually called before the `nextTick`, the stream will start emitting data\nimmediately.\n\n## License\n\nMIT / APACHE 2\n","_id":"duplex@0.2.4","dist":{"shasum":"e6179687c3e7c99404613664746bc4ef4a249ecb","tarball":"http://registry.npmjs.org/duplex/-/duplex-0.2.4.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"1.0.0":{"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"name":"duplex","description":"base class for a duplex stream","version":"1.0.0","homepage":"https://github.com/dominictarr/duplex","repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"scripts":{"test":"node test/index.js"},"readme":"# duplex\n\n<img src=https://secure.travis-ci.org/dominictarr/duplex.png?branch=master>\n\n\nSimple base class for [duplex](https://github.com/dominictarr/stream-spec#duplex) streams, that automatically handles pausing and buffering.\n\n``` js\n\nvar duplex = require('duplex')\n\nvar d = duplex()\n  .on('_data', function (data) {\n    d.sendData(data)\n  })\n  .on('_end', function () {\n    d.sendEnd()\n  })\n```\n\n## API\n\n### on('_data', function (data))\n\nEmitted when `write(data)` is called.\n\n### on('_end', function ())\n\nEmitted when `end()` is called\n\n### _data(data)\n\nAdd `data` to the output buffer. \n`'data'` will be emitted if the stream is not paused.\n\n### _end()\n\nCap the output buffer. no more data events may be added.\n`'end'` will be emitted after the buffer drains, \nor immediately, if the stream is unpaused.\n\n### pause()\n\nPause the readable side of the stream.  \nThis will prevent it from emitting 'data' or or 'end'\nuntil resume is called.\n\n### resume()\nUnpause the readable side of the stream.  \nThis will allow it to emit `'data'` and `'end'` events.  \nIf there there is any data in the output buffer,  \nIt will start draining immediately.  \n\n## _pause(), emit('pause')\n\nPause the writable side of the stream. this will cause write() to return false,\nso any streams piping into this stream will pause after thier next write.\n\n## emit('drain')\n\nUnpause the writable side of the stream. This will cause `Stream#pipe` to call `resume()`\non any streams piping to this stream.\n\n## Automatic Behaviours\n\n`destroy()` is called automatically after both sides of the stream have ended.\n`write()==false` after the stream emits `'pause'`,  \nand `write()==true` after the stream emits `'drain'`.\nThe user is responsible for emitting `'pause'` and `'drain'`.\n\n`resume()` will be called on `nextTick`, unless `pause()` was called manually.\nIf `resume()` is manually called before the `nextTick`, the stream will start emitting data\nimmediately.\n\n## License\n\nMIT / APACHE 2\n","_id":"duplex@1.0.0","dist":{"shasum":"6abc5c16ec17e4c578578727126700590d3a2dda","tarball":"http://registry.npmjs.org/duplex/-/duplex-1.0.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}}},"readme":"","maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"time":{"modified":"2012-11-13T05:43:43.926Z","created":"2012-07-25T14:04:44.851Z","0.0.1":"2012-07-25T14:04:46.876Z","0.1.0":"2012-07-25T19:14:02.958Z","0.1.1":"2012-08-11T13:01:17.955Z","0.1.2":"2012-08-14T12:21:26.639Z","0.1.3":"2012-09-11T14:45:14.617Z","0.1.4":"2012-09-11T18:30:25.536Z","0.2.0":"2012-09-26T15:10:10.081Z","0.2.1":"2012-09-26T16:43:19.417Z","0.2.2":"2012-10-11T13:55:18.282Z","0.2.4":"2012-10-21T15:28:00.139Z","1.0.0":"2012-11-13T05:43:43.926Z"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"repository":{"type":"git","url":"git://github.com/dominictarr/duplex.git"},"users":{"fgribreau":true,"daviddias":true,"darelf":true},"_attachments":{},"_etag":"\"BHIR8Q294QZN2YR2M1KHIQWU5\""}