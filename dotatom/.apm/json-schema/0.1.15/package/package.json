{"name":"json-schema","main":"./lib/json-schema","version":"0.1.15","description":"Json Schema enhancements for Atom","repository":{"type":"git","url":"git+https://github.com/OmniSharp/atom-json-schema.git"},"license":"MIT","engines":{"atom":">=0.174.0 <2.0.0"},"scripts":{"postinstall":"gulp npm-postinstall","prepublish":"gulp npm-prepublish"},"dependencies":{"atom-space-pen-views":"^2.0.5","bluebird":"^2.9.27","del":"^1.2.0","fuzzaldrin":"^2.1.0","gulp":"^3.9.0","gulp-util":"^3.0.5","is-my-json-valid":"^2.12.0","jquery":"^2.1.4","lodash":"^3.10.0","loopback":"^2.22.2","loopback-datasource-juggler":"^2.40.1","loophole":"^1.1.0","merge-stream":"^0.1.8","node-fetch":"^1.3.1","react":"^0.13.3","rx":"^2.5.3","semver":"^5.0.0","through2":"^2.0.0","tsd":"~0.6.1","typescript":"^1.5.0-beta"},"consumedServices":{"status-bar":{"versions":{"^1.0.0":"consumeStatusBar"}},"jsonschema.provider":{"versions":{"0.1.0":"consumeProvider"}}},"providedServices":{"autocomplete.provider":{"description":"Json Schema based auto completions.","versions":{"2.0.0":"provideAutocomplete"}},"linter":{"versions":{"1.0.0":"provideLinter"}}},"package-dependencies":{"linter":">=1.0.0"},"readme":"# Json Schema\n\nAdds support for [JSON Schema](http://json-schema.org/) in [Atom](http://atom.io).\n\n![](https://raw.githubusercontent.com/OmniSharp/atom-json-schema/master/schema.gif)\n\n\n![](https://raw.githubusercontent.com/OmniSharp/atom-json-schema/master/schema2.gif)\n\n## Whats it do\nUsing is-my-json-valid for schema validation, Json Schema warns the user if their json file doesn't match the commonly defined schema.  Also using the defined Json Schema we can offer auto completion results for enum values.\n\n## Extentions\nJson Schema was built for use with [OmniSharp](http://www.omnisharp.net/).  There is an extension point that lets you plug in custom intellisense providers.  This is to help with tools like Npm or NuGet, where package.json and project.json\nboth have their package references.  This this extension point you can plug in calls off to the associated webservice / localcache / whatever you want.\n\n## Npm support\nAs stated above, NPM support is added out of the box.  Search is limited to `starts with` (if anyone knows how to fuzzy search against skimdb log an issue!).  We can add the package for you, as well as the latest version as values.\n\n## Bower support\nBower support is planned, I still have to figure out the best way to find version numbers (or if its even possible since bower uses git...).\n\n\n# Make your own schema provider\nThe schema interface is declared in typescript as follows:\n\n```\ninterface IAutocompleteProvider {\n    fileMatchs: string[];\n    pathMatch: (path: string) => boolean;\n    getSuggestions: (options: IAutocompleteProviderOptions) => Promise<Suggestion[]>;\n    dispose(): void;\n}\n\ninterface IAutocompleteProviderOptions {\n    editor: Atom.TextEditor;\n    bufferPosition: TextBuffer.Point; // the position of the cursor\n    prefix: string;\n    scopeDescriptor: { scopes: string[] };\n    activatedManually: boolean;\n    path: string;\n}\n```\n\n* fileMatchs\n  are the files that the provider applies to\n* pathMatch\n  is a callback method that lets you determine.  The path that is give is based on where the user has their cursor in the file.\n* getSuggestions\n  identical to autocomplete+ with a few extra options.\n  * path\n    is the path part of the file such as `dependencies` or `dependencies.lodash`\n\nThen in your `package.json` add...\n\n```\n\"jsonschema.provider\": {\n  \"versions\": {\n    \"0.1.0\": \"consumeProvider\"\n  }\n}\n```\n\n\n# TODO\n* Bower support?\n* JSPM support?\n* Allow for custom $schema's\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/OmniSharp/atom-json-schema/issues"},"homepage":"https://github.com/OmniSharp/atom-json-schema#readme","_id":"json-schema@0.1.15","_shasum":"f851f25b842d43dd9afce62b13464816d8332b2e","_resolved":"file:../d-11591-72731-hpr8a/package.tgz","_from":"../d-11591-72731-hpr8a/package.tgz"}