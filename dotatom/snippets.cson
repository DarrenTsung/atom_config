# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

# Storm8 Snippets (php)
'.text.html.php':
  'debugLog':
    'prefix': 'log'
    'body': 'debugLog("$1", false);'
  'debugLogVar':
    'prefix': 'logVar'
    'body': 'debugLogVar(\$$1, "$1", false);'
  'logCallStack':
    'prefix': 'logCallStack'
    'body': 'debugLog(getCallStack(), false);'
  'trackingErrorEmpty':
    'prefix': 'trackErrorEmpty'
    'body': """
      TrackingData::getInstance()->trackError('${1:changeEventName}',
                                              '${2:This change event failed}',
                                              array());
      return false;
      """
  'trackingErrorSingle':
    'prefix': 'trackErrorSingle'
    'body': """
      TrackingData::getInstance()->trackError('${1:changeEventName}',
                                              '${2:This change event failed}',
                                              array('${3:changeEventVariable}' => \$${3:changeEventVariable}));
      return false;
      """
  'trackingErrorMultiple':
    'prefix': 'trackErrorMultiple'
    'body': """
      TrackingData::getInstance()->trackError('${1:changeEventName}',
                                              '${2:This change event failed}',
                                              array('${3:changeEventVariable}' => \$${3:changeEventVariable},
                                                    '${4:changeEventVariable2}' => \$${4:changeEventVariable2},
                                                    '${4:changeEventVariable3}' => \$${4:changeEventVariable3},
                                                    '${4:changeEventVariable4}' => \$${4:changeEventVariable4},
                                                    '${4:changeEventVariable5}' => \$${4:changeEventVariable5}));
      return false;
      """
    
  # reminders for myself to use the snippets
  'Snippets \'log\'/\'logVar\'!':
    'prefix': 'debugLog'
    'body': 'lo'
    
    
# CoffeeScript Snippets
'.source.coffee':
  'LogVariable':
    'prefix': 'logVariable'
    'body': 'console.log("$1: " + $1)'
  'LogObject':
    'prefix': 'logObject'
    'body': """
      paramStrings = []
      for k, v of ${1:variableName}
        paramStrings.push(k + " => " + v)
      console.log("${1:variableName}: {\\\\n" + paramStrings.reduceRight((x, y) -> x + "\\\\n" + y) + "\\\\n}")
    """
    
  'Region Mark':
    'prefix': 'region'
    'body': '#region mark - $1'
  'End Region':
    'prefix': 'endregion'
    'body': '#endregion'
    
  'Add Notification Success':
    'prefix': 'notifSuccess'
    'body': 'atom.notifications.addSuccess("${1:Succeeded at something!}", {dismissable: true})'
  'Add Notification Info':
    'prefix': 'notifInfo'
    'body': 'atom.notifications.addInfo("${1:Information!}", {dismissable: true})'
  'Add Notification Warning':
    'prefix': 'notifWarn'
    'body': 'atom.notifications.addWarning("${1:Warning: thing happened!}", {dismissable: true})'
  'Add Notification Error':
    'prefix': 'notifError'
    'body': 'atom.notifications.addError("${1:Failed to do something!}", {dismissable: true})'
  
  
# Unity Snippets
'.source.cs':
  'deltaTime':
    'prefix': 'dt'
    'body': 'Time.deltaTime'
  'Debug.Log':
    'prefix': 'log'
    'body': 'Debug.Log("$1");'
  'Debug.LogVariable':
    'prefix': 'logVariable'
    'body': 'Debug.Log("$1: " + $1);'
  'Debug.LogWarning':
    'prefix': 'logWarn'
    'body': 'Debug.LogWarning("$1");'
  'Debug.LogError':
    'prefix': 'logError'
    'body': 'Debug.LogError("$1");'
    
  'Pragma Mark':
    'prefix': 'pragma'
    'body': '// PRAGMA MARK - $1'
    
  'Notification Event':
    'prefix': 'notif'
    'body': 'public static UnityEvent ${2:PlayerChanged} = new UnityEvent();'
  'Notification Event With Arguments':
    'prefix': 'notifArgs'
    'body': 'public static UnityEvents.${1:Type} ${2:PlayerChanged} = new UnityEvents.${1:Type}();'
    
  'Summary':
    'prefix': 'summary'
    'body': """
      /// <summary>
      /// ${1:summary}
      /// </summary>
      """
  'Param':
    'prefix': 'param'
    'body': """
      /// <param name="${2:paramName}">${3:paramInformation}</param>
      """
      
  'SerializeField':
    'prefix': 'serial'
    'body': '[SerializeField]'
  'SerializeFieldReadyOnly':
    'prefix': 'readonly'
    'body': '[SerializeField, ReadOnly]'
    
  'PlayerNotificationWrapper':
    'prefix': 'playerNotificationWrapper'
    'body': """
    protected void ${1:HandlePrimaryDirection}Wrapper(int playerIndex, ${2:Vector2} ${3:primaryDirection}) {
      if (playerIndex == _playerIndex) this.${1:HandlePrimaryDirection}(${3:primaryDirection});
    }
    
    protected virtual void ${1:HandlePrimaryDirection}(Vector2 ${3:primaryDirection}) {
      // do nothing for now
    }
    """
  